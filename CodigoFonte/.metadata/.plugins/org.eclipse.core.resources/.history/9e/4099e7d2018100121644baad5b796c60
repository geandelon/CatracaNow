package com.apoio.catracanow;

import java.util.List;

import org.json.JSONException;

import com.apoio.auxiliar.ControleDeAcesso;
import com.apoio.auxiliar.MapeadorControleDeAcesso;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.view.Menu;
import android.widget.CompoundButton;
import android.widget.Toast;
import android.widget.ToggleButton;

public class CatracaNowActivity extends Activity {
	
	private Context _contexto;	
	private List<ControleDeAcesso> _listaAcessoAtual;
	private MapeadorControleDeAcesso _mapeadorControleDeAcesso;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_catraca_now);
		
		_contexto = this;
		_mapeadorControleDeAcesso = new MapeadorControleDeAcesso(_contexto);
		
		// temos que iniciar e finalizar o servidor
		// quando estiver ligado
		// o serviço fica rodando e executa a consulta no servidor
		// a cada x segundos
		
		//((ToggleButton) findViewById(R.id.toggleButton)).setOnClickListener(btnAcertoOnClickListener);
		
		ToggleButton toggle = (ToggleButton) findViewById(R.id.toggleButton);
		toggle.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
		    public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
		        if (isChecked) {
		            // The toggle is enabled
		        	startService(new Intent(_contexto, CatracaNowService.class));
		        } else {
		            // The toggle is disabled
		        	stopService(new Intent(_contexto, CatracaNowService.class));
		        }
		    }
		});
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.activity_catraca_now, menu);
		return true;
	}
	
	private class WorkerThread extends Thread {
		
		@Override
		public void run() {
			
			// Código que gerencia toda a chamada ao service
			
			
			try {
				_listaAcessoAtual = ControleDeAcesso.parse(consultarAcesso());
			} catch (JSONException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}

			while (true) {				
				try {
					
					Thread.sleep(5000);				
					// analisa se houve modificação
					// caso exista enviar notificação
					_listaAcessoAux = ControleDeAcesso.parse(consultarAcesso());
					
					if (_listaAcessoAtual.size() == 0)
						_listaAcessoAtual = _listaAcessoAux;
					else					
						gerarNotificacao();
					
				} catch (InterruptedException e) {
					Toast.makeText(_contexto, "Problema ao colocar a thread para dormir.", Toast.LENGTH_SHORT).show();
				} catch (Exception e) {
					Toast.makeText(_contexto, e.getMessage(), Toast.LENGTH_SHORT).show();					
				}
			
			
			super.run();
		}
		
	}

}
